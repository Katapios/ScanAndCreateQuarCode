//
//  QRScannerView.swift
//  ScanAndCreateQuarCode
//
//  Created by –î–µ–Ω–∏—Å –†—é–º–∏–Ω on 01.07.2025.
//

import SwiftUI
import AVFoundation
import CoreImage.CIFilterBuiltins        // üëà –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR

struct QRScannerView: View {
    @EnvironmentObject private var scanStore: QRScanStore
    @EnvironmentObject private var codeStore: QRCodeStore   // üëà –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É
    @StateObject private var viewModel = QRScannerViewModel()
    @Binding var tab: Int

    // UI-—Å–æ—Å—Ç–æ—è–Ω–∏—è
    @State private var editingItem: QRCodeItem?
    @State private var showDeleteSheet = false

    private var hasSelection: Bool { scanStore.items.contains { $0.isSelected } }
    private let ciContext = CIContext()

    var body: some View {
        NavigationStack {
            VStack(spacing: 0) {
                cameraPreview
                Divider()
                actionButtons
                codesScroll
            }
            .navigationTitle("QR –°–∫–∞–Ω–µ—Ä")
            .toolbar { trailingToolbar }
            .sheet(item: $editingItem) { item in
                // –º–æ–∂–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
                EditQRItemView(item: item, store: scanStore)
            }
            .confirmationDialog("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ QR-–∫–æ–¥—ã?",
                                isPresented: $showDeleteSheet,
                                titleVisibility: .visible) {
                Button("–£–¥–∞–ª–∏—Ç—å", role: .destructive, action: scanStore.deleteSelected)
            }
        }
        .onChange(of: viewModel.scannedCode) { addScanned($0) }
        .onAppear { viewModel.checkCameraAuthorization() }
    }

    // MARK: UI-—Å–µ–∫—Ü–∏–∏ ---------------------------------------------------------

    private var cameraPreview: some View {
        ZStack {
            QRScannerRepresentable(scannedCode: $viewModel.scannedCode)
                .frame(height: 300)
                .cornerRadius(12)
                .padding()

            RoundedRectangle(cornerRadius: 12)
                .stroke(Color.blue, lineWidth: 2)
                .frame(height: 300)
                .padding()

            VStack {
                Spacer()
                Text(viewModel.statusMessage)
                    .foregroundColor(viewModel.statusColor)
                    .padding(.bottom, 150)
            }
        }
    }

        private var actionButtons: some View {
            HStack {
                Button("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",  action: scanStore.selectAll).font(.caption)
                Button("–°–Ω—è—Ç—å –≤—ã–±–æ—Ä",  action: scanStore.deselectAll).font(.caption)
    
                Button("–ù–∞ –≥–ª–∞–≤–Ω—É—é") { moveSelectedToGenerator() }  // —Å—Ç–∞–ª–æ
                    .font(.caption)
                    .disabled(!hasSelection)
            }
             .padding(.vertical, 8)
             .opacity(scanStore.items.isEmpty ? 0 : 1)
         }

    private var codesScroll: some View {
        ScrollView {
            LazyVStack {
                ForEach(scanStore.items) { item in
                    QRCodeRow(item: item,
                              isSelected: Binding(
                                get: { item.isSelected },
                                set: { scanStore.set(item.id, selected: $0) }),
                              onEdit: { editingItem = item })
                    .onAppear {
                        if item.id == scanStore.items.last?.id { scanStore.loadMore() }
                    }
                    .swipeActions {
                        Button(role: .destructive) { scanStore.delete(item.id) } label: {
                            Label("–£–¥–∞–ª–∏—Ç—å", systemImage: "trash")
                        }
                    }
                }
            }
        }
    }

        private var trailingToolbar: some ToolbarContent {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                if hasSelection {
                    Button(role: .destructive) { showDeleteSheet = true } label: {
                        Image(systemName: "trash")
                    }
                }
            }
         }

    // MARK: –õ–æ–≥–∏–∫–∞ ------------------------------------------------------------

    /// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤ —Å—Ç–æ—Ä –∏ –¥–∞—ë–º —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
    private func addScanned(_ code: String?) {
        guard let code, !scanStore.all.contains(where: { $0.text == code }) else { return }
        scanStore.add(text: code, image: nil)
        UINotificationFeedbackGenerator().notificationOccurred(.success)
        viewModel.scannedCode = nil
    }
    
    // MARK: ‚Äì –ü–µ—Ä–µ–Ω–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä -------------------------------
    private func moveSelectedToGenerator() {
        let selected = scanStore.items.filter(\.isSelected)

        for item in selected {
            guard !codeStore.all.contains(where: { $0.text == item.text }) else { continue }
            if let qr = makeQR(from: item.text) {
                codeStore.addItem(text: item.text, image: qr)
            }
        }

        codeStore.loadMore()         // ‚Üê –≤–∞–∂–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        scanStore.deselectAll()
        tab = 0                      // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
    private func makeQR(from text: String) -> UIImage? {
        let filter = CIFilter.qrCodeGenerator()
        filter.setValue(Data(text.utf8), forKey: "inputMessage")
        guard let output = filter.outputImage else { return nil }

        let scaled = output.transformed(by: .init(scaleX: 10, y: 10))
        guard let cg = ciContext.createCGImage(scaled, from: scaled.extent) else { return nil }

        return UIImage(cgImage: cg)
    }
}


#Preview {
    QRScannerView(tab: .constant(1))
        .environmentObject(QRScanStore())
        .environmentObject(QRCodeStore())   // –Ω—É–∂–µ–Ω –∏ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä
}
